# -*- coding: utf-8 -*-
import re
from odoo import api, fields, models
from datetime import datetime
import logging
import requests
import httplib, urllib
import json
_logger = logging.getLogger(__name__)

class CostCenterPaymentRequest(models.Model):
    _name = 'hr.expense_approval.request_cost_center_payment'
    _description = u'Yêu cầu thanh toán cho từng mã dự toán'
    request_payment = fields.Many2one('hr.expense_approval.request_payment',string='Thanh toán dự toán')

    name = fields.Char(string='Mã dự toán')
    cost_center_id = fields.Many2one('hr.expense_approval.cost_center_code',string="Mã dự toán",onchange='_onchange_cost_center_id',required=True)
    cost_center_desc = fields.Char(string='Nội dung mã dự toán',compute='_onchange_cost_center_id',readonly=True)
    amount = fields.Float(string='Số tiền', required=True)
    avaiable_amount = fields.Float(string = "Số còn khả dụng (VNĐ)", compute='_onchange_cost_center_id',readonly=True)
    payment_date = fields.Date(string="Ngày đề nghị thanh toán",readonly=True, computed='_get_payment_date')

    real_amount = fields.Float(string ='Số tiền thực tế',required=True)
class PaymentRequest(models.Model):
    _name = "hr.expense_approval.request_payment"
    _description = "Yeu cau thanh toan"
    name = fields.Char(string="Yêu cầu thanh toán")
    description = fields.Text(string="Nội dung")

     #Ngày đề nghị
    date = fields.Date(default=fields.Date.context_today, string="Ngày yêu cầu",readonly=True)
    payment_date = fields.Date(default=fields.Date.context_today, string="Ngày đề nghị thanh toán",required=True)
    financial_activity = fields.Many2one('hr.expense_approval.financial_activity',string="Hoạt động Tài chính",readonly=True,store=True)
    #Người đề nghị
    employee_id = fields.Many2one('res.users', string="Người yêu cầu",readonly=True)
    company_id = fields.Many2one('res.company', string='Công ty', readonly=True)
    location_id = fields.Many2one('hr.expense_approval.location', string="Địa điểm",readonly=True)

     #quotation request
    quotation_id = fields.Many2one('hr.expense_approval.request_quotation',
                                          string='Đề xuất dự toán')
    cost_center_payment_requests = fields.One2many(
                'hr.expense_approval.request_cost_center_payment'
                , 'request_payment'
                , string='Yêu cầu mã dự toán'
                , onchange='_get_total_request_amount'
                , states={'confirmed': [('readonly', True)], 'approved': [('readonly', True)], 'done': [('readonly', True)], 'closed': [('readonly', True)]}
                , ondelete="cascade", copy=False)
    #Amount
    #Số tiền
    currency_id = fields.Many2one('res.currency', string='Tiền tệ thanh toán',readonly=True)
    amount = fields.Float(string='Tổng tiền', required=True,readonly=True)
    currency_rate = fields.Float(string="Tỷ giá",required=True,default=1)
    amount_vnd = fields.Float(string='Tổng tiền (VND)', store=True, compute='_compute_amount_vnd')
    amount_text = fields.Char(string='Tổng tiền (VND) bằng chữ',readonly=True)

    total_line_cash_amount = fields.Float(string='Tổng tiền mặt', compute='_compute_totalAmount')
    total_line_bank_amount = fields.Float(string='Tổng tiền ngân hàng', compute='_compute_totalAmount')


    attachment_number = fields.Integer(compute='_compute_attachment_number', string='Số chứng từ')
    pm_approver_id = fields.Many2one('res.users', string="Phê duyệt cấp PM", readonly=True)
    td_approver_id = fields.Many2one('res.users', string="Phê duyệt cấp TD", readonly=True)
    sd_approver_id = fields.Many2one('res.users', string="Phê duyệt cấp SD", readonly=True)
    ce_approver_id = fields.Many2one('res.users', string="Phê duyệt cấp CE", readonly=True)
    ceo_approver_id = fields.Many2one('res.users', string="Giám đốc", readonly=True)

    fi_ox_approver_id = fields.Many2one('res.users', string="Phê duyệt cấp OX", readonly=True)
    fi_pm_approver_id = fields.Many2one('res.users', string="Phê duyệt cấp PM", readonly=True)
    fi_td_approver_id = fields.Many2one('res.users', string="Phê duyệt cấp TD", readonly=True)
    fi_sd_approver_id = fields.Many2one('res.users', string="Phê duyệt cấp SD", readonly=True)
    fi_ce_approver_id = fields.Many2one('res.users', string="Phê duyệt cấp CE", readonly=True)
    fi_cfo_approver_id = fields.Many2one('res.users', string="Kế toán trưởng", readonly=True)

    approval_level = fields.Many2one('hr.expense_approval.level',string='Cấp phê duyệt', store=True)
    approval_next =  fields.Many2one('res.users', string="Người phê duyệt tiếp", compute='_compute_cost_center_amount', readonly=True,store=True)

    #Line
    expense_line_ids = fields.One2many('hr.expense_approval.request_payment.line', 'payment_id', string="Các lịch thanh toán",ondelete="cascade", copy=False)
    
#Status - BEGIN
    state = fields.Selection([
        ('draft', 'Bản drafft'),
        ('confirmed', 'Chủ dự toán duyệt'),
        ('approved', 'Tài chính duyệt'),
        ('done', 'Hoàn thành')
        ], default='draft',  string='Trạng thái', copy=False, index=True, readonly=True, store=True,
        help="Status of the request.")

    @api.multi
    def action_draft(self):
        self.state = 'draft'

    @api.multi
    def action_confirm(self):
        self.state = 'confirmed'
    
    @api.multi
    def action_approve(self):
        if(self.approval_next.user_id.id != self.env.uid):
            return 
            #Đisplay Warning Here - Khong duoc quyen phe duyet
        else:
            my_emp_id = int(self.env.uid)
            my_emp = self.env['res.users'].search([('user_id', '=', my_emp_id)])
            #Lay list approvers cua cost center
            if(self.pm_approver_id.id is False):
                self.pm_approver_id = my_emp
                self.approval_next = self.cost_center_id.td_approver_id
                return
            if(self.td_approver_id.id is False):
                self.td_approver_id = my_emp
                if(self.approval_level.level == "td"):
                    self.state = 'approved'
                    self.approval_next = self.company_financial_approval.ox_approver_id
                else:
                    self.approval_next = self.cost_center_id.sd_approver_id
                return
            if(self.sd_approver_id.id is False):
                self.sd_approver_id = my_emp
                if(self.approval_level.level == "ce"):
                    self.state = 'approved'
                    self.approval_next = self.company_financial_approval.ox_approver_id
                else:
                    self.approval_next = self.cost_center_id.ce_approver_id
                return
            if(self.ce_approver_id.id is False):
                self.ce_approver_id = my_emp
                self.state = 'approved'         
                #Chuyen sang tai chinh duyet
                self.approval_next = self.company_financial_approval.ox_approver_id

    @api.multi
    def action_done(self):
        if(self.approval_next.user_id.id != self.env.uid):
            return
            #Đisplay Warning Here - Khong duoc quyen phe duyet
        else:
            my_emp_id = int(self.env.uid)
            my_emp = self.env['res.users'].search([('user_id', '=', my_emp_id)])
            #Lay list approvers cua cost center
            if(self.fi_pm_approver_id.id is False):
                self.fi_pm_approver_id = my_emp
                self.approval_next = self.company_financial_approval.td_approver_id
                return
            if(self.fi_td_approver_id.id is False):
                self.fi_td_approver_id = my_emp
                if(self.approval_level.level == "td"):
                    self.state = 'done'
                    #self.approval_next = self.company_financial_approval.ox_approver_id
                else:
                    self.approval_next = self.company_financial_approval.sd_approver_id
                return
            if(self.fi_sd_approver_id.id is False):
                self.fi_sd_approver_id = my_emp
                if(self.approval_level.level == "ce"):
                    self.state = 'done'
                    #self.approval_next = self.company_financial_approval.ox_approver_id
                else:
                    self.approval_next = self.company_financial_approval.ce_approver_id
                return
            if(self.fi_ce_approver_id.id is False):
                self.fi_ce_approver_id = my_emp
                self.state = 'done'         
    #Status - END


    @api.onchange('quotation_id')
    def _onchange_quotation_id(self):
        for payment in self:
            payment.beneficiary = payment.quotation_id.beneficiary
            payment.cost_center_id = payment.quotation_id.cost_center_id.id
            payment.payment_date = payment.quotation_id.payment_date
            payment.employee_id = payment.quotation_id.employee_id.id
            payment.company_id = payment.quotation_id.company_id.id
            payment.location_id  = payment.quotation_id.location_id.id
            payment.name = "Yêu cầu thanh toán - " + payment.quotation_id.name
            payment.financial_activity = payment.quotation_id.financial_activity.id
            payment.currency_id = payment.quotation_id.currency_id.id
            payment.currency_rate = payment.quotation_id.currency_rate
            payment.amount = payment.quotation_id.amount
            payment.approval_level= payment.quotation_id.approval_level.id
            payment.company_financial_approval = payment.quotation_id.company_financial_approval.id

    @api.depends('amount', 'currency_id','currency_rate')
    def _compute_amount_vnd(self):
        for request in self:
            request.amount_vnd = request.amount * request.currency_rate

    @api.multi
    def action_draft(self):
        self.state = 'draft'

    @api.multi
    def action_confirm(self):
        self.state = 'confirmed'

    @api.multi
    def action_approve(self):
        self.state = 'approved'

    @api.multi
    def action_done(self):
        self.state = 'done'

    @api.depends('expense_line_ids.bank_amount','expense_line_ids.cash_amount')
    #@api.onchange('expense_line_ids')
    def _compute_totalAmount(self):
        for request in self:
            total_cash = total_bank = 0.0
            for line in request.expense_line_ids:
                _logger.info('Payment Line - ' + line.name)
                total_cash += line.cash_amount
                total_bank += line.bank_amount
            request.update({
                'total_line_cash_amount': total_cash,
                'total_line_bank_amount': total_bank
            })

    @api.multi
    def _compute_attachment_number(self):
        attachment_data = self.env['ir.attachment'].read_group([('res_model', '=', 'hr.expense_approval.request_payment'), ('res_id', 'in', self.ids)], ['res_id'], ['res_id'])
        attachment = dict((data['res_id'], data['res_id_count']) for data in attachment_data)
        for request_payment in self:
            request_payment.attachment_number = attachment.get(request_payment.id, 0)
    @api.multi
    def action_get_attachment_view(self):
        self.ensure_one()
        res = self.env['ir.actions.act_window'].for_xml_id('base', 'action_attachment')
        res['domain'] = [('res_model', '=', 'hr.expense_approval.request_payment'), ('res_id', 'in', self.ids)]
        res['context'] = {'default_res_model': 'hr.expense_approval.request_payment', 'default_res_id': self.id}
        return res
    
    @api.depends('payment_date','cost_center_id')
    def _compute_cost_center_amount(self):
        if(self.cost_center_id):
            for request_payment in self:    

                #Next Approval Online
                #Phu thuoc vao cost_center_id
                request_payment.approval_next = request_payment.cost_center_id.pm_approver_id
                if(request_payment.pm_approver_id):
                    request_payment.approval_next = request_payment.cost_center_id.td_approver_id
                
                if(request_payment.td_approver_id and (request_payment.approval_level.level == "sd" or request_payment.approval_level.level == "ce")):
                    request_payment.approval_next = request_payment.cost_center_id.sd_approver_id
                
                if(request_payment.sd_approver_id and (request_payment.approval_level.level == "ce")):
                    request_payment.approval_next = request_payment.cost_center_id.ce_approver_id

                _logger.info('Next Approval: ' + str(request_payment.approval_next))

                avaiable_url = 'http://training.kehoach.osscar.topica.vn/api/ApiBoardChiPhi/CanPay'
                real_url = 'http://training.kehoach.osscar.topica.vn/api/ApiBoardChiPhi/MyPresentMoney'
                # int(str
                # (
                # datetime.strftime
                #     (
                #         request_quotation.payment_date,'%Y'
                #     )
                # ) + 
                # str(int(datetime.strftime(request_quotation.payment_date,'%m')))),
                datepayment = datetime.strptime(request_payment.payment_date, "%Y-%m-%d")
                #_logger.info('Payment Date: '+ str(datepayment.year * 10 + datepayment.month))
                avaiable_params = {
                                        'cdt':request_payment.cost_center_id.name[:3],
                                        'ma_du_toan':request_payment.cost_center_id.name,
                                        'thang': datepayment.year * 10 + datepayment.month,
                                        'so_tien':0
                                }
                r = requests.post(url = avaiable_url, data = avaiable_params)
                r_real = requests.post(url = real_url, data = avaiable_params)
                #conn = httplib.HTTPConnection("training.kehoach.osscar.topica.vn:80")
                #conn.request("POST", "/api/ApiBoardChiPhi/CanPay?"+urllib.urlencode(avaiable_params))
                _logger.info('BPMS Request: ' + urllib.urlencode(avaiable_params))
                #r = conn.getresponse()
                response_data_a = json.loads(json.dumps(json.loads(r.content)))
                response_data_r = json.loads(json.dumps(json.loads(r_real.content)))
                _logger.info('BPMS Response: ' + str(response_data_a) + str(response_data_r))
                _logger.info('Out Value: ' + str(response_data_a["outValue"]))
                #if(response_data_a["success"]==1):
                request_payment.avaiable_amount = float(response_data_a["outValue"])
                request_payment.real_amount = float(response_data_r["outValue"])
    
    @api.model
    def create(self,vals):
        vals["payment_request_id"] = datetime.utcnow().strftime('%Y%m%d.%H%M%S%f')[:-3]
        #vals["name"]= vals["cost_center_id"].name + "-" vals["financial_activity"].name
        return super(PaymentRequest,self).create(vals)

class PaymentRequestLine(models.Model):
    _name = "hr.expense_approval.request_payment.line"
    #_description = "Lịch thanh toán"
    payment_id = fields.Many2one('hr.expense_approval.request_payment', string="Yêu cầu thanh toán", readonly=True, copy=False)

    name = fields.Char(string="Nội dung")
    #Ngày đề nghị
    payment_date = fields.Date(default=fields.Date.context_today, string="Ngày đề nghị thanh toán")

    #Thông tin chuyển khoản
    bank_owner = fields.Char(string="Chủ tài khoản")
    bank_name = fields.Char(string="Ngân hàng")
    bank_branch = fields.Char(string="Chi nhánh")
    bank_city = fields.Char(string="Thành phố")
    bank_account = fields.Char(string="Số tài khoản")
    bank_content = fields.Char(string="Nội dung chuyển khoản")
    
    #Amount
    total_amount = fields.Float(string="Tổng tiền", compute='_compute_total_amount')
    cash_amount = fields.Float(string="Tiền mặt",)
    bank_amount = fields.Float(string="Ngân hàng")
    total_amount_text = fields.Char(string="Tổng tiền bằng chữ")

    state = fields.Selection([
        ('open', 'Chưa thanh toán'),
        ('paid', 'Đã thanh toán')
        ],  string='Trạng thái', copy=False, index=True)

    attachment_number = fields.Integer(compute='_compute_attachment_number', string='Số chứng từ')
    @api.multi
    def _compute_attachment_number(self):
        attachment_data = self.env['ir.attachment'].read_group([('res_model', '=', 'hr.expense_approval.request_payment.line'), ('res_id', 'in', self.ids)], ['res_id'], ['res_id'])
        attachment = dict((data['res_id'], data['res_id_count']) for data in attachment_data)
        for request_payment in self:
            request_payment.attachment_number = attachment.get(request_payment.id, 0)
    @api.multi
    def action_get_attachment_view(self):
        self.ensure_one()
        res = self.env['ir.actions.act_window'].for_xml_id('base', 'action_attachment')
        res['domain'] = [('res_model', '=', 'hr.expense_approval.request_payment.line'), ('res_id', 'in', self.ids)]
        res['context'] = {'default_res_model': 'hr.expense_approval.request_payment.line', 'default_res_id': self.id}
        return res

    @api.depends('cash_amount', 'bank_amount')
    def _compute_total_amount(self):
        for line in self:
            line.total_amount = line.cash_amount + line.bank_amount
    
